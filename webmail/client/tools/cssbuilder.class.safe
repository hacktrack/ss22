<?php
class cssbuilder
{
	private $templateData=array();
	private $settings=array(
		'template_path'=>'./',
		'skin_path'=>'./'
	);
	
	public function __construct($settings=array())
	{
		$this->settings=array_merge($this->settings,$settings);
	}
	public function log($text)
	{
		try
		{
			throw new Exception('[cssbuilder] '.$text);
		}
		catch(Exception $e)
		{
			
		}
	}
	private function hex2rgb($hex)
	{
		$hex = str_replace("#", "", $hex);
		
		if(strlen($hex) == 3){
			$r = hexdec(substr($hex,0,1).substr($hex,0,1));
			$g = hexdec(substr($hex,1,1).substr($hex,1,1));
			$b = hexdec(substr($hex,2,1).substr($hex,2,1));
		}else{
			$r = hexdec(substr($hex,0,2));
			$g = hexdec(substr($hex,2,2));
			$b = hexdec(substr($hex,4,2));
		}
		$rgb = array($r,$g,$b);
		return $rgb;
	}
	private function XML2Vars($xml)
	{
		$vars=array();
		if(!is_object($xml)){
			$xml=simplexml_load_string($xml);
		}
		foreach($xml as $key=>$val)
		{
			$vars[$key]=trim(strval($val));
			$vars['rgb'][$key]=join(',',$this->hex2rgb($vars[$key],true));
		}
		return $vars;
	}
	public function assignVarsFromXML($xml)
	{
		$aVars=$this->XML2Vars($xml);
		$this->templateData=array_merge($this->templateData,$aVars);
	}
	public function getTemplate($file)
	{
		$file=realpath($this->settings['template_path'].'/'.$file);
		if($file){
			return template($file,$this->templateData);
		}else{
			// ERROR file does not exist
		}
		return '';
	}
}
?>