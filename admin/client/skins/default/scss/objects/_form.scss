// Form
// Handles layout for all forms.

// Block
.form {}


// Elements
.form-block {
	margin-bottom: g(5);
}

.form-label {
	@include flexbox;
	@include align-items(center);
	white-space: nowrap;
	height: $object-height;
	margin-bottom: $form-label-offset;
}

.form-label .button.link {
	margin-left: auto !important;
	font-size: inherit !important;

	&::before {
		content: none !important;
	}

	> input {
		padding: 0 !important;
	}
}

.form-row {
	height: $object-height;
	line-height: $object-height;
	box-sizing: content-box;
	padding-bottom: g(1);

	@media #{$medium-up} {
		padding-bottom: g(2);
	}

	// States
	.rulecard & {
		padding-bottom: g(1);
	}

	// Modifiers
	&.margin {

		@media #{$large-up} {
			padding-top: $form-row-margin;
		}
	}

	&.large {
		@include align-items(flex-start);
		height: auto;
	}
}

.form-label + .form-row {
	padding-top: 0;
}

.form-row + .form-desc {
	margin-top: g(-0.5);

	@media #{$medium-up} {
		margin-top: g(-1.5);
	}
}

.form-desc {
	font-size: rem(13);
	color: $text-grey;
	padding: 0 0 g(1) 0;
}

.form-image {
	@include border;
	width: 100%;
	max-width: rem(strip-unit($image-max-width)); // Half resolution of source image
}

.form-error {
	color: $error;
	text-transform: uppercase;
	font-weight: 600;
	margin-top: g(-0.5);
	padding-bottom: g(1);
}

.form-item {

	// Modifiers
	&.query {
		padding-bottom: g(1);

		.form-label {

			@media #{$medium-up} {
				margin-bottom: 0;
			}
		}

		.form-row {
			padding-bottom: 0;
		}
	}
}


// New BEM version for form template inclusion

// Elements
.form__section {
	margin-bottom: g(5);
}

.form__block {
	position: relative;
	padding-bottom: g(1.5);
	margin-bottom: g(2);
}

.form__block--border {

	&::after {
		@include border('bottom');
		content: '';
		position: absolute;
		left: $grid-gutter;
		right: 0;
		bottom: 0;
	}
}

.form__block-title {
	font-size: rem(18);
	padding-bottom: g(1/3);

	a {
		float: right;

		font-size: s(1);

		@include theme {
			color: $theme-primary;
		}
	}
}

.form__block-desc {
	font-size: rem(13);
	color: $text-grey;
	padding-bottom: g(2/3);
}

.form__item {
	@include flexbox;
	@include flex-wrap(wrap);
	@include align-content(flex-start);
	min-height: $object-height;

	// Modifiers
	&.margin {

		@media #{$large-up} {
			margin-top: $form-row-margin;
		}
	}

	&.row {

		.form__label, .form__element {

			&:not(.obj_input_number) {
				@include flex(1, 1, 0);
			}
		}

		.form__label {
			padding-right: g(1);
		}

		.form__element--text {
			margin: 0;
		}

		.form__element--multi.form__element--multi.form__element--multi {
			@include flex(none);
			margin-bottom: 0;
			height: $object-height;

			border: 0;
		}
	}
}

.obj_force_options {
	@include order(3);
	height: $object-height;
	padding-left: $grid-gutter;
	display: inherit; // Inherits display: flex; from parent
	display: none !important; // Must be hidden in 11.4

	~ .form__label {
		@include flex(1, 1, 0);
	}
}

.form__label {
	@include order(1);
	@include flex(100%);
	height: $object-height;
	max-height: none !important; // TODO: Remove rule when unnecessary // TODO: Remove !important when unnecessary
	line-height: $object-height !important; // TODO: Remove !important when unnecessary
	margin-bottom: $form-label-offset;

	// Modifiers
	&.margin {
		margin-bottom: g(1.5);
	}

	&.flex {
		@include flexbox;
		@include align-items(center);

		> * { // Nudge
			position: relative;
			top: 1px;
		}
	}
}

.form__element {
	@include order(2);
	@include flex(1, 1, 0);
	border: 1px solid $transparent; // HACK: Fixes a bug with browsers not having min-width: min-content as default
	margin-bottom: g(1.5);

	~ .form__label {
		@include flex(100%);
	}

	// Modifiers
	&.obj_input_number {
		@include flex(none);
		-webkit-flex: none !important;
		-ms-flex: none !important;
		flex: none !important;
		width: auto;

		input {
			max-width: $form-min-width;
			text-align: right;
			padding: 0 p(1) 0 0;
		}
	}
}

.form__element + .form__element {
	margin-left: g(1);

	// Modifiers
	&.button.text {
		width: auto !important;
	}
}

.form__element--multi {
	margin-bottom: g(1/2);
}

.form__desc {
	@include order(4);
	@include flex(100%);
	font-size: rem(13);
	color: $text-grey;
	padding: g(1/2) 0 g(3/2);

	~ .form__element		{ margin-bottom: 0; }
	+ .form__label.toggle	{ margin-bottom: g(-1); } // TODO: Instead of a negative logic, come up with positive.
}

.form__group.form__group--bytes {
	@include flexbox;
	@include flex(1, 1, 0);
	@include order(2);

	margin: -1px 0 0 -1px;

	border: 1px solid transparent;

	&.is-disabled > * {
		background-color: $lighter-grey;
		color: $grey;
	}
}

.form__group-left, .form__group-right {
	border-radius: $radius;

	&.form__element {
		margin-left: 0;
		margin-right: 0;
	}
}

.form__group-right:not(.hide) + .form__group-left { // Only do this when item has an appended element that is not hidden
	@include flex(1, 1, 0);
	border-top-right-radius: 0 !important;
	border-bottom-right-radius: 0 !important;
	border-right: 0 !important; // Using instead group-right negative margin because of z-index bugs
}

.form__group-right {
	@include order(3); // Position group-right after other elements
	@include flex(none);
	border-top-left-radius: 0 !important;
	border-bottom-left-radius: 0 !important;

	// Modifiers
	&.dropdown {
		width: auto !important;
	}
}

// COLOR DEBUG FOR FORM CLASSES
[debug] { // .debug class must be on encapsulating parent

	$debug-color-map:
	//	 class		color		index
		(block		red			1001),
		(item		yellow		1002),
		(element	blue		1003),
		(label		green		1004),
		(desc		deeppink	1005);

	@each $class, $color, $index in $debug-color-map {

		.form__#{$class} {
			@include debug-area;

			&::before, &::after {
			 	z-index: $index !important;
			}

			&::after {
			 	background-color: rgba($color, 0.1);
			 	box-shadow: 0 0 0 2px mix($color, $white);
			}

			&::before {
			 	color: $dark;
			 	content: '#{$class}';
			 	background-color: mix($color, $white);
			 	font-weight: 600;
			 	text-align: right;
				padding: 0 p(0.5) 0 calc(#{p(0.5)} + 2px);
			}
		}
	}
}
